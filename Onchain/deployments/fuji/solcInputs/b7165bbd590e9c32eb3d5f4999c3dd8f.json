{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * @title AccessControl\r\n * @dev Contract for managing access permissions to medical records\r\n * Allows patients to grant/revoke access to insurance services and medical professionals\r\n */\r\ncontract AccessControl is ReentrancyGuard {\r\n    // Custom errors\r\n    error OnlyPatient(address entity);\r\n    error InvalidAddress(address sender);\r\n    error NotAccessOtherPatient_None();\r\n    error entityTypeIncorrect();\r\n    error accessTypeIncorrect();\r\n    error expiresAtNotValid();\r\n    error NotPermissionGranted();\r\n    error NotAllowEntityAccess();\r\n\r\n    // Enums for different types of access\r\n    enum AccessType {\r\n        NONE,\r\n        READ,\r\n        WRITE\r\n    }\r\n    enum EntityType {\r\n        NONE,\r\n        PATIENT,\r\n        AUDITOR,\r\n        HEALTH,\r\n        INSURANCE,\r\n        GOVERNMENT,\r\n        FINANCIAL,\r\n        EDUCATIONAL,\r\n        LABOR,\r\n        LEGAL,\r\n        TECHNOLOGICAL\r\n    }\r\n\r\n    // Struct to store access permission details\r\n    struct Permission {\r\n        bool isActive;\r\n        AccessType accessType;\r\n        uint256 grantedAt;\r\n        uint256 expiresAt;\r\n        string purpose; // Purpose of access (e.g., \"Insurance claim review\")\r\n    }\r\n\r\n    // Mappings\r\n    mapping(address => EntityType) internal entityTypes;\r\n    mapping(uint256 => mapping(address => Permission)) internal permissions; // docId => entity => permission\r\n    mapping(address => mapping(address => Permission)) internal patientPermissions; // patient => entity => permission\r\n\r\n    // Events\r\n    event AccessGrantedDoc(\r\n        uint256 indexed docId,\r\n        address indexed patient,\r\n        address indexed entity,\r\n        AccessType accessType,\r\n        uint256 grantedAt,\r\n        uint256 expiresAt,\r\n        string purpose\r\n    );\r\n    event AccessRevokedDoc(\r\n        uint256 indexed docId,\r\n        address indexed patient,\r\n        address indexed entity,\r\n        uint256 revokedAt\r\n    );\r\n    event AccessGrantedEntity(\r\n        address indexed patient,\r\n        address indexed entity,\r\n        AccessType accessType,\r\n        uint256 grantedAt,\r\n        uint256 expiresAt,\r\n        string purpose\r\n    );\r\n    event AccessRevokedEntity(\r\n        address indexed patient,\r\n        address indexed entity,\r\n        uint256 revokedAt\r\n    );\r\n    event EntityRegistered(address indexed entity, EntityType entityType);\r\n\r\n    // Modifiers\r\n    modifier onlyPatient() {\r\n        if (entityTypes[msg.sender] != EntityType.PATIENT) {\r\n            revert OnlyPatient(msg.sender);\r\n        }\r\n        _;\r\n    }\r\n    modifier onlyAllowed(address _entity){\r\n        EntityType sender = entityTypes[msg.sender];\r\n        EntityType userEntity = entityTypes[_entity];\r\n\r\n        if((sender != EntityType.PATIENT && userEntity != EntityType.PATIENT) ||\r\n        sender == EntityType.NONE || userEntity == EntityType.NONE ||\r\n        uint8(sender) > uint8(type(EntityType).max) || uint8(userEntity) > uint8(type(EntityType).max)) {\r\n            revert NotAllowEntityAccess();\r\n        }\r\n        _;\r\n    }\r\n    modifier validAddressAccess(address _addr) {\r\n        if (_addr == address(0)) {\r\n            revert InvalidAddress(msg.sender);\r\n        }\r\n        if (entityTypes[_addr] == EntityType.PATIENT || entityTypes[_addr] == EntityType.NONE  ||\r\n            uint8(entityTypes[_addr]) > uint8(type(EntityType).max)) {\r\n            revert NotAccessOtherPatient_None();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Register an entity with its type\r\n     * @param _entityType Type of entity (AUDITOR, HEALTH, INSURANCE)\r\n     */\r\n    function registerEntity(EntityType _entityType) external { //Payable?\r\n        if(uint8(_entityType) > uint8(type(EntityType).max)){\r\n            revert entityTypeIncorrect();\r\n        }\r\n\r\n        //Payable\r\n\r\n        entityTypes[msg.sender] = _entityType;\r\n        emit EntityRegistered(msg.sender, _entityType);\r\n    }\r\n\r\n    /**\r\n     * @dev Grant access to an entity for the patient's records\r\n     * @param _entity Address of the entity to grant access to\r\n     * @param _accessType Type of access to grant\r\n     * @param _expiresAt Timestamp when access expires (0 for no expiration)\r\n     * @param _purpose Purpose of the access\r\n     */\r\n    function grantAccessEntity(\r\n        address _entity, \r\n        AccessType _accessType, \r\n        uint256 _expiresAt, \r\n        string calldata _purpose\r\n    ) external onlyPatient validAddressAccess(_entity) {\r\n\r\n        if(uint8(_accessType) > uint8(type(AccessType).max)){\r\n            revert accessTypeIncorrect();\r\n        }\r\n        if(_expiresAt <= 60){\r\n            revert expiresAtNotValid();\r\n        }\r\n        //Prices\r\n\r\n        uint256 sExpiresAt = block.timestamp + _expiresAt;\r\n        patientPermissions[msg.sender][_entity] = Permission({\r\n            isActive: true,\r\n            accessType: _accessType,\r\n            grantedAt: block.timestamp,\r\n            expiresAt: sExpiresAt,\r\n            purpose: _purpose\r\n        });\r\n\r\n        emit AccessGrantedEntity(\r\n            msg.sender,\r\n            _entity,\r\n            _accessType,\r\n            block.timestamp,\r\n            sExpiresAt,\r\n            _purpose\r\n        );\r\n    }\r\n    /**\r\n     * @dev Revoke access from an entity\r\n     * @param _entity Address of the entity to revoke access from\r\n     */\r\n    function revokeAccessEntity(address _entity) external onlyPatient validAddressAccess(_entity) {\r\n\r\n        Permission memory ppermission = patientPermissions[msg.sender][_entity];\r\n\r\n        if (!ppermission.isActive) {\r\n            revert NotPermissionGranted();\r\n        }\r\n\r\n        ppermission.isActive = false;\r\n        ppermission.accessType = AccessType.NONE;\r\n        ppermission.grantedAt = 0;\r\n        ppermission.expiresAt = 0;\r\n        ppermission.purpose = \"\";\r\n\r\n        emit AccessRevokedEntity(msg.sender, _entity, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Grant access to an entity for the patient's document record\r\n     * @param _entity Address of the entity to grant access to\r\n     * @param _accessType Type of access to grant\r\n     * @param _expiresAt Timestamp when access expires (0 for no expiration)\r\n     * @param _purpose Purpose of the access\r\n     */\r\n    function grantAccessDoc(\r\n        uint256 _docId,\r\n        address _entity, \r\n        AccessType _accessType, \r\n        uint256 _expiresAt, \r\n        string calldata _purpose\r\n    ) external onlyPatient validAddressAccess(_entity) {\r\n\r\n        if(uint8(_accessType) > uint8(type(AccessType).max)){\r\n            revert accessTypeIncorrect();\r\n        }\r\n        if(_expiresAt <= 60){\r\n            revert expiresAtNotValid();\r\n        }\r\n\r\n        //Prices\r\n\r\n        uint256 sExpiresAt = block.timestamp + _expiresAt;\r\n        permissions[_docId][_entity] = Permission({\r\n            isActive: true,\r\n            accessType: _accessType,\r\n            grantedAt: block.timestamp,\r\n            expiresAt: sExpiresAt,\r\n            purpose: _purpose\r\n        });\r\n\r\n        emit AccessGrantedDoc(\r\n            _docId,\r\n            msg.sender,\r\n            _entity,\r\n            _accessType,\r\n            block.timestamp,\r\n            sExpiresAt,\r\n            _purpose\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Revoke access from an document\r\n     * @param _entity Address of the entity to revoke access from\r\n     */\r\n    function revokeAccessDoc(uint256 _docId, address _entity) external onlyPatient validAddressAccess(_entity) {\r\n\r\n        Permission memory ppermission = permissions[_docId][_entity];\r\n\r\n        if (!ppermission.isActive) {\r\n            revert NotPermissionGranted();\r\n        }\r\n\r\n        ppermission.isActive = false;\r\n        ppermission.accessType = AccessType.NONE;\r\n        ppermission.grantedAt = 0;\r\n        ppermission.expiresAt = 0;\r\n        ppermission.purpose = \"\";\r\n\r\n        emit AccessRevokedDoc(_docId, msg.sender, _entity, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Get permission details for a specific patient-entity pair\r\n     * @param _entity Address to check\r\n     * @return Permission struct with all details\r\n     */\r\n    function getPermissionEntity(address _entity) external view onlyPatient returns (Permission memory) {\r\n        return patientPermissions[msg.sender][_entity];\r\n    }\r\n\r\n    /**\r\n     * @dev Get permission details for a specific document-entity pair\r\n     * @param _entity Address to check\r\n     * @return Permission struct with all details\r\n     */\r\n    function getPermissionDoc(uint256 _docId, address _entity) external view onlyPatient returns (Permission memory) {\r\n        return permissions[_docId][_entity];\r\n    }\r\n\r\n    /**\r\n     * @dev Get entity type for an address\r\n     * @param _entity Address to check\r\n     * @return EntityType of the address\r\n     */\r\n    function getEntityType(address _entity) external view returns (EntityType) {\r\n        return entityTypes[_entity];\r\n    }\r\n}"
    },
    "contracts/DocsRecords.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"./AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/**\r\n * @title DocsRecords\r\n * @dev Contract for managing private documents metadata and ownership\r\n * Integrates with AccessControl for permission management\r\n */\r\ncontract DocsRecords is AccessControl, Ownable {\r\n    //errors\r\n    error InvalidDocumentInputs();\r\n    error UnauthorizedUser();\r\n\r\n    //structs\r\n    struct Document {\r\n        uint256 id;\r\n        address payable owner;\r\n        address createdBy;\r\n        address updatedBy; //\r\n        bytes32 documentHash; //\r\n        string ipfsCID; //\r\n        string documentType; //\r\n        string description; //\r\n        uint256 createdAt;\r\n        uint256 updatedAt; //\r\n        bool isActive; //\r\n        EntityType sectorType;\r\n    }\r\n\r\n    // State variables\r\n    uint256 private s_nextDocId;\r\n\r\n    // Mappings\r\n    mapping(uint256 => Document) private s_documents;\r\n    mapping(address => uint256[]) public s_patientDocuments; // patient => document IDs\r\n\r\n    // Events\r\n    event DocumentAdded(\r\n        uint256 indexed documentId,\r\n        address indexed owner,\r\n        address indexed createdBy,\r\n        string ipfsCID,\r\n        string documentType,\r\n        string description,\r\n        uint256 createdAt,\r\n        bool isActive,\r\n        EntityType sectorType\r\n    );\r\n    event DocumentUpdated(\r\n        uint256 indexed documentId,\r\n        address indexed updatedBy,\r\n        string ipfsCID,\r\n        string documentType,\r\n        string description,\r\n        uint256 updatedAt,\r\n        bool isActive\r\n    );\r\n    event DocumentDeactivated(\r\n        uint256 indexed documentId,\r\n        address indexed deactivatedBy,\r\n        uint256 deactivatedAt\r\n    );\r\n\r\n    modifier verifyInputs(\r\n        bytes32 _documentHash,\r\n        string calldata _ipfsHash,\r\n        string calldata _documentType,\r\n        string calldata _description\r\n    ) {\r\n        if (\r\n            _documentHash == bytes32(0) ||\r\n            bytes(_ipfsHash).length == 0 ||\r\n            bytes(_documentType).length == 0 ||\r\n            bytes(_description).length == 0\r\n        ) {\r\n            revert InvalidDocumentInputs();\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        // Initialize the contract\r\n        s_nextDocId = 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Access Function to filter valid entities and inputs for creating a document\r\n     */\r\n    function accessCreateDocument(\r\n        address _entity,\r\n        bytes32 _documentHash,\r\n        string calldata _ipfsHash,\r\n        string calldata _documentType,\r\n        string calldata _description,\r\n        bool _isActive,\r\n        EntityType _sectorType\r\n    )\r\n        external\r\n        onlyAllowed(_entity)\r\n        verifyInputs(_documentHash, _ipfsHash, _documentType, _description)\r\n        returns (uint256)\r\n    {\r\n        if (uint8(_sectorType) > uint8(type(EntityType).max)) {\r\n            revert InvalidDocumentInputs();\r\n        }\r\n\r\n        address holder = entityTypes[msg.sender] == EntityType.PATIENT ? msg.sender : _entity;\r\n        address creator = entityTypes[msg.sender] != EntityType.PATIENT ? msg.sender : _entity;\r\n\r\n        Permission memory allowance = patientPermissions[holder][creator];\r\n\r\n        if (\r\n            allowance.isActive == false ||\r\n            allowance.accessType != AccessType.WRITE ||\r\n            allowance.expiresAt < block.timestamp\r\n        ) {\r\n            revert NotPermissionGranted();\r\n        }\r\n\r\n        return\r\n            addDocumentHolder(\r\n                holder,\r\n                creator,\r\n                _documentHash,\r\n                _ipfsHash,\r\n                _documentType,\r\n                _description,\r\n                _isActive,\r\n                _sectorType\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new document by the User\r\n     * @param _holder Address of the document owner\r\n     * @param _creator Address of the entity creating the document\r\n     * @param _documentHash Hash of the document\r\n     * @param _ipfsHash IPFS hash of the encrypted document\r\n     * @param _documentType Type of the document\r\n     * @param _description Description of the document\r\n     * @param _isActive Whether the document is active\r\n     * @param _sectorType Sector type of the document\r\n     * @return documentId The ID of the created document\r\n     */\r\n    function addDocumentHolder(\r\n        address _holder,\r\n        address _creator,\r\n        bytes32 _documentHash,\r\n        string calldata _ipfsHash,\r\n        string calldata _documentType,\r\n        string calldata _description,\r\n        bool _isActive,\r\n        EntityType _sectorType\r\n    ) private returns (uint256) {\r\n        uint256 docId = s_nextDocId++;\r\n        uint256 createdAt = block.timestamp;\r\n\r\n        // Create and populate document\r\n        s_documents[docId] = Document({\r\n            id: docId,\r\n            owner: payable(_holder),\r\n            createdBy: _creator,\r\n            updatedBy: address(0),\r\n            documentHash: _documentHash,\r\n            ipfsCID: _ipfsHash,\r\n            documentType: _documentType,\r\n            description: _description,\r\n            createdAt: createdAt,\r\n            updatedAt: 0,\r\n            isActive: _isActive,\r\n            sectorType: _sectorType\r\n        });\r\n        s_patientDocuments[msg.sender].push(docId);\r\n\r\n        emit DocumentAdded(\r\n            docId,\r\n            _holder,\r\n            _creator,\r\n            _ipfsHash,\r\n            _documentType,\r\n            _description,\r\n            createdAt,\r\n            _isActive,\r\n            _sectorType\r\n        );\r\n\r\n        return docId;\r\n    }\r\n\r\n    /**\r\n     * @notice Access Function to filter valid entities and inputs for updating a document\r\n     */\r\n    function accessUpdateDocument(\r\n        uint256 _docId,\r\n        bytes32 _documentHash,\r\n        string calldata _ipfsHash,\r\n        string calldata _documentType,\r\n        string calldata _description,\r\n        bool _isActive\r\n    ) external verifyInputs(_documentHash, _ipfsHash, _documentType, _description) {\r\n        EntityType sender = entityTypes[msg.sender];\r\n\r\n        if (sender == EntityType.NONE || uint8(sender) > uint8(type(EntityType).max)) {\r\n            revert NotAllowEntityAccess();\r\n        }\r\n\r\n        Document memory doc = s_documents[_docId];\r\n\r\n        if (sender == EntityType.PATIENT) {\r\n            if (address(doc.owner) != msg.sender) {\r\n                revert UnauthorizedUser();\r\n            }\r\n        } else {\r\n            Permission memory allowance = permissions[_docId][msg.sender];\r\n\r\n            if (\r\n                allowance.isActive == false ||\r\n                allowance.accessType != AccessType.WRITE ||\r\n                allowance.expiresAt < block.timestamp\r\n            ) {\r\n                revert NotPermissionGranted();\r\n            }\r\n        }\r\n\r\n        updateDocumentHolder(\r\n            _docId,\r\n            _documentHash,\r\n            _ipfsHash,\r\n            _documentType,\r\n            _description,\r\n            _isActive\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Update an existing document by the User\r\n     * @param _docId ID of the document to update\r\n     * @param _documentHash New hash of the document\r\n     * @param _ipfsHash New IPFS hash of the encrypted document\r\n     * @param _documentType New type of the document\r\n     * @param _description New description of the document\r\n     * @param _isActive Whether the document is active\r\n     */\r\n    function updateDocumentHolder(\r\n        uint256 _docId,\r\n        bytes32 _documentHash,\r\n        string calldata _ipfsHash,\r\n        string calldata _documentType,\r\n        string calldata _description,\r\n        bool _isActive\r\n    ) private {\r\n        Document storage doc = s_documents[_docId];\r\n\r\n        uint256 updatedAt = block.timestamp;\r\n\r\n        doc.updatedBy = msg.sender;\r\n        doc.documentHash = _documentHash;\r\n        doc.ipfsCID = _ipfsHash;\r\n        doc.documentType = _documentType;\r\n        doc.description = _description;\r\n        doc.updatedAt = updatedAt;\r\n        doc.isActive = _isActive;\r\n\r\n        emit DocumentUpdated(\r\n            _docId,\r\n            msg.sender,\r\n            _ipfsHash,\r\n            _documentType,\r\n            _description,\r\n            updatedAt,\r\n            _isActive\r\n        );\r\n    }\r\n\r\n    //Function to deactivate a document\r\n    function deactivateDocument(address _entity, uint256 _docId) external onlyAllowed(_entity){\r\n\r\n        address holder = entityTypes[msg.sender] == EntityType.PATIENT ? msg.sender : _entity;\r\n        address creator = entityTypes[msg.sender] != EntityType.PATIENT ? msg.sender : _entity;\r\n\r\n        Permission memory allowance = patientPermissions[holder][creator];\r\n\r\n        if (\r\n            allowance.isActive == false ||\r\n            allowance.accessType != AccessType.WRITE ||\r\n            allowance.expiresAt < block.timestamp\r\n        ) {\r\n            revert NotPermissionGranted();\r\n        }\r\n\r\n        Document storage doc = s_documents[_docId];\r\n\r\n        if(address(doc.owner) != holder) {\r\n            revert UnauthorizedUser();\r\n        }\r\n\r\n        doc.isActive = false;\r\n        emit DocumentDeactivated(_docId, creator, block.timestamp);\r\n    }\r\n\r\n    function getDocument(uint256 _docId) external view returns (Document memory) {\r\n        EntityType sender = entityTypes[msg.sender];\r\n\r\n        if (sender == EntityType.NONE || uint8(sender) > uint8(type(EntityType).max)) {\r\n            revert NotAllowEntityAccess();\r\n        }\r\n\r\n        Document memory doc = s_documents[_docId];\r\n\r\n        if (sender == EntityType.PATIENT) {\r\n            if (address(doc.owner) != msg.sender) {\r\n                revert UnauthorizedUser();\r\n            }\r\n        } else {\r\n            Permission memory allowance = permissions[_docId][msg.sender];\r\n\r\n            if (\r\n                allowance.isActive == false ||\r\n                allowance.accessType != AccessType.READ ||\r\n                allowance.expiresAt < block.timestamp\r\n            ) {\r\n                revert NotPermissionGranted();\r\n            }\r\n        }\r\n        return s_documents[_docId];\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}